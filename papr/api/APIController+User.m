//
//  APIController+User.m
//  papr
//
//  Created by Brian WF Tobin on 8/8/17.
//  Copyright Â© 2017 Jebudas Communications, Inc. All rights reserved.
//

#import "APIController+User.h"

@implementation APIController (User)

// SEND FACEBOOK ACCOUNT KIT AUTH CODE TO SERVER
- (void) sendAuthCode:(NSString *)codeRCVD success:(UserSuccess)success failure:(UserFailure)failure {
    
    NSString *path = [NSString stringWithFormat:@"%@/api/login/authcode/?format=json", PAPR_API_BASE_URL];
    
    NSDictionary *parameters = @{@"authcode" : codeRCVD};
    
    [self apiPOST:path parameters:parameters success:^(NSURLSessionDataTask *task, id responseObject) {
        
        success(responseObject);
        
    } failure:^(NSURLSessionDataTask *task, NSError *error) {
        
        failure(error);
        
    }];
    
}

// SEND USERNAME TO SERVER FOR ACCOUNT CREATION
- (void) sendLoginKit:(NSDictionary *)loginKitRCVD success:(UserSuccess)success failure:(UserFailure)failure {
    
    NSString *path = [NSString stringWithFormat:@"%@/api/atsbtsip1p1/user/signup/?format=json", PAPR_API_BASE_URL];
    
    NSDictionary *parameters = @{ @"user_username" : [loginKitRCVD objectForKey:@"user_username"],
                                  @"user_display_name" : [loginKitRCVD objectForKey:@"user_display_name"],
                                  @"user_profile_avatar_url" : [loginKitRCVD objectForKey:@"user_profile_avatar_url"],
                                  @"user_username_TEST" : [loginKitRCVD objectForKey:@"user_username_TEST"],
                                  @"fb_user_id" : [loginKitRCVD objectForKey:@"fb_user_id"],
                                  @"fb_phone_number" : [loginKitRCVD objectForKey:@"fb_phone_number"],
                                  @"fb_timestamp" : [self returnFBTimestamp]};
    
    // ^ FB TIMESTAMP IS ACTUALLY A SIMPLE CODE GENERATED BY THE PHONE THAT IS DECIPHERED ON THE SERVER

    [self apiPOST:path parameters:parameters success:^(NSURLSessionDataTask *task, id responseObject) {
        
        [[DataController dc] createUserDictionaryWithDictionary : parameters];
        [[DataController dc] createPaprDictionaryWithDictionary : parameters];
        
        success(responseObject);
        
    } failure:^(NSURLSessionDataTask *task, NSError *error) {
        
        failure(error);
        
    }];
    
}

// UPDATE USER
- (void) updateUser:(NSDictionary *)userDictionaryRCVD success:(UserSuccess)success failure:(UserFailure)failure {
    
    NSString *path = [NSString stringWithFormat:@"%@/api/atsbtsip1p1/user/update/?format=json", PAPR_API_BASE_URL];
    
    //NSDictionary *parameters = @{ @"user_dictionary" : userDictionaryRCVD};
    
    NSLog(@"API . updateUser . userDictionaryRCVD = %@", userDictionaryRCVD);
    
    [self apiPOST:path parameters:userDictionaryRCVD success:^(NSURLSessionDataTask *task, id responseObject) {
        
        success(responseObject);
        
    } failure:^(NSURLSessionDataTask *task, NSError *error) {
        
        failure(error);
        
    }];
    
}

// GET FEATURED SUBSCRIPTIONS
- (void) getSignupSubscriptions:(NSDictionary *)parameters success:(UserSuccess)success failure:(UserFailure)failure {
    
    NSString *path = [NSString stringWithFormat:@"%@/api/atsbtsip1p1/user/signup_subscriptions/?format=json", PAPR_API_BASE_URL];
    
    [self apiGET:path parameters:nil success:^(NSURLSessionDataTask *task, id responseObject) {
        
        success(responseObject);
        
    } failure:^(NSURLSessionDataTask *task, NSError *error) {
        
        failure(error);
        
    }];
    
}

// GET USER PROFILE
- (void) getUserProfile:(NSDictionary *)parameters success:(UserSuccess)success failure:(UserFailure)failure {
    
    NSString *path = [NSString stringWithFormat:@"%@/api/atsbtsip1p1/user/profile/?format=json", PAPR_API_BASE_URL];
    
    [self apiGET:path parameters:parameters success:^(NSURLSessionDataTask *task, id responseObject) {
        
        success(responseObject);
        
    } failure:^(NSURLSessionDataTask *task, NSError *error) {
        
        failure(error);
        
    }];
    
}

    
// GET FOLLOWERS
- (void) getMyFollowers:(NSDictionary *)parameters success:(UserSuccess)success failure:(UserFailure)failure {
    
    NSString *path = [NSString stringWithFormat:@"%@/api/atsbtsip1p1/user/followers/?format=json", PAPR_API_BASE_URL];
    
    [self apiGET:path parameters:parameters success:^(NSURLSessionDataTask *task, id responseObject) {
        
        // NSLog(@"APIController+User . getMyFollowers . success");
        
        success(responseObject);
        
    } failure:^(NSURLSessionDataTask *task, NSError *error) {
        
        // NSLog(@"APIController+User . getMyFollowers . task.response = %@", task.response);
        // NSLog(@"APIController+User . getMyFollowers . failure.error = %@", error);
        
        failure(error);
        
    }];
    
}

// GET FOLLOWING
- (void) getMyFollowing:(NSDictionary *)parameters success:(UserSuccess)success failure:(UserFailure)failure {
    
    NSString *path = [NSString stringWithFormat:@"%@/api/atsbtsip1p1/user/following/?format=json", PAPR_API_BASE_URL];
    
    [self apiGET:path parameters:parameters success:^(NSURLSessionDataTask *task, id responseObject) {
        
        // NSLog(@"APIController+User . getMyFollowing . success");
        
        success(responseObject);
        
    } failure:^(NSURLSessionDataTask *task, NSError *error) {
        
        // NSLog(@"APIController+User . getMyFollowing . task.response = %@", task.response);
        // NSLog(@"APIController+User . getMyFollowing . failure.error = %@", error);
        
        failure(error);
        
    }];
    
}


// SUBSCRIBE TO THIS USER
- (void) updateMyFollowStatusForPublisher:(NSDictionary *)followDictionary success:(UserSuccess)success failure:(UserFailure)failure {
    
    NSString *path = [NSString stringWithFormat:@"%@/api/atsbtsip1p1/user/followers/?format=json", PAPR_API_BASE_URL];

    NSDictionary *parameters = @{@"follow_dictionary":followDictionary};
    
    [self apiPOST:path parameters:parameters success:^(NSURLSessionDataTask *task, id responseObject) {
        
        success(responseObject);
        
    } failure:^(NSURLSessionDataTask *task, NSError *error) {
        
        failure(error);
        
    }];
    
}

// REQUEST PUBLISHER ABILITY
- (void) requestPublisherAbility:(NSDictionary *)parameters success:(UserSuccess)success failure:(UserFailure)failure {
    
    NSString *path = [NSString stringWithFormat:@"%@/api/%@/user/request_publisher_ability/?format=json", PAPR_API_BASE_URL, PAPR_API_VERSION];
    
    [self apiPOST:path parameters:parameters success:^(NSURLSessionDataTask *task, id responseObject) {
        
        success(responseObject);
        
    } failure:^(NSURLSessionDataTask *task, NSError *error) {
        
        failure(error);
        
    }];
    
}


- (NSString *) returnFBTimestamp {

    NSString *timestamp = [[NSProcessInfo processInfo] globallyUniqueString];
    
    int digit_08 = arc4random_uniform(9);
    int digit_18 = 8 - digit_08;
    
    NSString *string_08 = [NSString stringWithFormat:@"%i", digit_08];
    NSString *string_18 = [NSString stringWithFormat:@"%i", digit_18];
    
    timestamp = [timestamp stringByReplacingCharactersInRange:NSMakeRange(8, 1) withString:string_08];
    timestamp = [timestamp stringByReplacingCharactersInRange:NSMakeRange(18, 1) withString:string_18];
    
    return timestamp;
    
}

@end
